{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSpring, useTransition, animated, config } from \"react-spring\";\nvar TextTransition = function (props) {\n  var _a = props.direction,\n    direction = _a === void 0 ? \"up\" : _a,\n    _b = props.inline,\n    inline = _b === void 0 ? false : _b,\n    _c = props.springConfig,\n    springConfig = _c === void 0 ? config.default : _c,\n    _d = props.delay,\n    delay = _d === void 0 ? 0 : _d,\n    className = props.className,\n    style = props.style,\n    children = props.children;\n  var initialRun = React.useRef(true);\n  var transitions = useTransition([children], {\n    from: {\n      opacity: 0,\n      transform: \"translateY(\".concat(direction === \"down\" ? \"-100%\" : \"100%\", \")\")\n    },\n    enter: {\n      opacity: 1,\n      transform: \"translateY(0%)\"\n    },\n    leave: {\n      opacity: 0,\n      transform: \"translateY(\".concat(direction === \"down\" ? \"100%\" : \"-100%\", \")\"),\n      position: \"absolute\"\n    },\n    config: springConfig,\n    immediate: initialRun.current,\n    delay: !initialRun.current ? delay : undefined\n  });\n  var _e = React.useState(0),\n    width = _e[0],\n    setWidth = _e[1];\n  var currentRef = React.useRef(null);\n  var heightRef = React.useRef(\"auto\");\n  React.useEffect(function () {\n    initialRun.current = false;\n    var elem = currentRef.current;\n    if (!elem) {\n      return;\n    }\n    var _a = elem.getBoundingClientRect(),\n      width = _a.width,\n      height = _a.height;\n    setWidth(width);\n    heightRef.current = height;\n  }, [children, setWidth, currentRef]);\n  var widthTransition = useSpring({\n    to: {\n      width: width\n    },\n    config: springConfig,\n    immediate: initialRun.current,\n    delay: !initialRun.current ? delay : undefined\n  });\n  return React.createElement(animated.div, {\n    className: \"text-transition \".concat(className),\n    style: __assign(__assign(__assign({}, inline && !initialRun.current ? widthTransition : undefined), style), {\n      whiteSpace: inline ? \"nowrap\" : \"normal\",\n      display: inline ? \"inline-flex\" : \"flex\",\n      height: heightRef.current\n    })\n  }, transitions(function (styles, item) {\n    return React.createElement(animated.div, {\n      style: __assign({}, styles),\n      ref: item === children ? currentRef : undefined,\n      children: item\n    });\n  }));\n};\nTextTransition.propTypes = {\n  direction: PropTypes.oneOf([\"up\", \"down\"]),\n  inline: PropTypes.bool,\n  delay: PropTypes.number,\n  className: PropTypes.string,\n  style: PropTypes.object,\n  springConfig: PropTypes.any\n};\nexport default TextTransition;","map":{"version":3,"mappings":"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","names":["React","PropTypes","useSpring","useTransition","animated","config","TextTransition","props","direction","_b","inline","_c","springConfig","default","_d","delay","className","style","children","initialRun","useRef","transitions","from","opacity","transform","enter","leave","position","immediate","current","undefined","useState","width","setWidth","currentRef","heightRef","useEffect","elem","getBoundingClientRect","height","widthTransition","to","div","whiteSpace","display","styles","item","ref","propTypes","oneOf","bool","number","string","object","any"],"sources":["/Users/taylorking/dev/portfolio_final/node_modules/react-text-transition/src/components/TextTransition.tsx"],"sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport {useSpring, useTransition, animated, config, SpringConfig} from \"react-spring\";\r\n\r\nconst TextTransition: React.FC<TextTransitionProps> = (props) => {\r\n    const {\r\n        direction = \"up\",\r\n        inline = false,\r\n        springConfig = config.default,\r\n\t\tdelay = 0,\r\n        className,\r\n        style,\r\n        children,\r\n    } = props;\r\n\r\n    const initialRun = React.useRef(true);\r\n\r\n\tconst transitions = useTransition([children], {\r\n\t\tfrom: { opacity : 0, transform : `translateY(${direction === \"down\" ? \"-100%\" : \"100%\"})` },\r\n\t\tenter: { opacity : 1, transform : \"translateY(0%)\" },\r\n\t\tleave: { opacity : 0, transform : `translateY(${direction === \"down\" ? \"100%\" : \"-100%\"})`, position: \"absolute\" },\r\n\t\tconfig: springConfig,\r\n        immediate: initialRun.current,\r\n\t\tdelay: ! initialRun.current ? delay : undefined,\r\n\t});\r\n\r\n    const [width, setWidth] = React.useState<number>(0);\r\n    const currentRef = React.useRef<HTMLDivElement>(null);\r\n\tconst heightRef = React.useRef<number | string>(\"auto\");\r\n\r\n    React.useEffect(() => {\r\n        initialRun.current = false;\r\n\r\n        const elem = currentRef.current;\r\n\r\n        if (! elem) {\r\n            return;\r\n        }\r\n        \r\n        const { width, height } = elem.getBoundingClientRect();\r\n        setWidth(width);\r\n\t\theightRef.current = height;\r\n    }, [children, setWidth, currentRef]);\r\n\r\n    const widthTransition = useSpring({\r\n\t\tto: { width },\r\n\t\tconfig: springConfig,\r\n        immediate: initialRun.current,\r\n\t\tdelay: ! initialRun.current ? delay : undefined,\r\n\t});\r\n\r\n\treturn (\r\n\t\t<animated.div\r\n\t\t\tclassName={`text-transition ${className}`}\r\n\t\t\tstyle={{\r\n                ...(inline && ! initialRun.current ? widthTransition : undefined),\r\n\t\t\t\t...style,\r\n\t\t\t\twhiteSpace: inline ? \"nowrap\" : \"normal\",\r\n\t\t\t\tdisplay: inline ? \"inline-flex\" : \"flex\",\r\n\t\t\t\theight: heightRef.current,\r\n\t\t\t}}\r\n\t\t>\r\n            {transitions((styles, item) =>\r\n                <animated.div style={{ ...styles }}\r\n                              ref={item === children ? currentRef : undefined}\r\n                              children={item} />\r\n            )}\r\n\t\t</animated.div>\r\n\t);\r\n};\r\n\r\ninterface TextTransitionProps {\r\n\treadonly direction?: \"up\" | \"down\";\r\n\treadonly inline?: boolean;\r\n\treadonly delay?: number;\r\n\treadonly springConfig?: SpringConfig;\r\n\treadonly className?: string;\r\n\treadonly style?: React.CSSProperties;\r\n    readonly children: React.ReactNode;\r\n}\r\n\r\nTextTransition.propTypes = {\r\n\tdirection: PropTypes.oneOf([\"up\", \"down\"]),\r\n\tinline: PropTypes.bool,\r\n\tdelay: PropTypes.number,\r\n\tclassName: PropTypes.string,\r\n\tstyle: PropTypes.object,\r\n\tspringConfig: PropTypes.any,\r\n};\r\n\r\nexport default TextTransition;\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}